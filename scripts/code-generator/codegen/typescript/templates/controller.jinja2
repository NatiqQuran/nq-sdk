import * as {{ controller.controller.name.capitalize() }}Type from "../types/{{controller.controller.name}}";
import { AxiosResponse } from "axios";
import { Connection } from "../client/connection";
import { BaseController } from "../utils/baseController";
import { RequestConfig } from "../utils/globalTypes";

{%- if controller.actions %}
{%- for action_group in controller.actions | groupby('action_name') %}

export class {{ controller.controller.name.capitalize() }}{{ action_group.grouper }} extends BaseController {
    constructor(conn: Connection, token?: string) {
        super(conn, token);
    }

    {%- for action in action_group.list %}
    /** {{ action.router.method.upper() }} {{ action.router.path }} */
    async {{ action.method_name }}(
        {%- if action.path_params %}
        {%- for p in action.path_params -%}
        {{ p }}: string{%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        {%- endif %}
        {%- if action.request_type %}
        {%- if action.path_params %}, {% endif %}data: {{ controller.controller.name.capitalize() }}Type.{{ action.request_type.name }}
        {%- endif %}
        {%- if action.params_type %}
        {%- if action.path_params or action.request_type %}, {% endif %}config?: RequestConfig<{{ controller.controller.name.capitalize() }}Type.{{ action.params_type.name }}>
        {%- else %}
        {%- if action.path_params or action.request_type %}, {% endif %}config?: RequestConfig
        {%- endif %}
    ): Promise<AxiosResponse<{%- if action.response_type %}{{ controller.controller.name.capitalize() }}Type.{{ action.response_type.name }}{%- else %}any{%- endif %}>> {
        return await this.axios{{ action.router.method.capitalize() }}(`{{ action.ts_path }}`{%- if action.request_type %}, data{%- endif %}, config);
    }
    {%- endfor %}
}

{%- endfor %}
{%- endif %}

export class {{ controller.controller.name.capitalize() }}Controller extends BaseController {
    {%- if controller.actions %}
    {%- for action_group in controller.actions | groupby('action_name') %}
    public readonly {{ action_group.grouper|lower }}: {{ controller.controller.name.capitalize() }}{{ action_group.grouper }};
    {%- endfor %}
    {%- endif %}

    constructor(connection: Connection, token?: string) {
        super(connection, token);
        {%- if controller.actions %}
        {%- for action_group in controller.actions | groupby('action_name') %}
        this.{{ action_group.grouper|lower }} = new {{ controller.controller.name.capitalize() }}{{ action_group.grouper }}(this.conn);
        {%- endfor %}
        {%- endif %}
    }
    {% for router in controller.routers if not router.group_name %}
    /** {{ router.router.method.upper() }} {{ router.router.path }} */
    async {{ router.method_name }}(
        {%- if router.path_params %}
        {%- for p in router.path_params -%}
        {{ p }}: string{%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        {%- endif %}
        {%- if router.request_type %}
        {%- if router.path_params %}, {%- endif %}data: {{ controller.controller.name.capitalize() }}Type.{{ router.request_type.name }}
        {%- endif %}
        {%- if router.params_type %}
        {%- if router.path_params or router.request_type %}, {%- endif %}config?: RequestConfig<{{ controller.controller.name.capitalize() }}Type.{{ router.params_type.name }}>
        {%- else %}
        {%- if router.path_params or router.request_type %}, {%- endif %}config?: RequestConfig
        {%- endif %}
    ): Promise<AxiosResponse<{%- if router.response_type %}{{ controller.controller.name.capitalize() }}Type.{{ router.response_type.name }}{%- else %}any{%- endif %}>> {
        return await this.axios{{ router.router.method.capitalize() }}(`{{ router.ts_path }}`{%- if router.request_type %}, data{%- endif %}, config);
    }
    {% endfor %}
}
