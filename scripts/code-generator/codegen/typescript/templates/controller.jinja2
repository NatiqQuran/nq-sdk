{% for controller in ast.controllers %}
export class {{ controller.controller.name.capitalize() }}Controller extends BaseController {
    constructor(connection: Connection, token?: string) {
        super(connection, token);
    }

    {% for router in controller.routers %}
    /** {{ router.router.method.upper() }} {{ router.router.path }} */
    async {{ router.method_name }}(
        {%- if router.path_params %}
        {{ router.path_params | join(', ') }}: string
        {%- endif %}
        {%- if router.request_type %}
        {%- if router.path_params %}, {% endif %}data: {{ router.request_type.name }}
        {%- endif %}
        {%- if router.params_type %}
        {%- if router.path_params or router.request_type %}, {% endif %}config?: RequestConfig<{{ router.params_type.name }}>
        {%- else %}
        {%- if router.path_params or router.request_type %}, {% endif %}config?: RequestConfig
        {%- endif %}
    ): Promise<AxiosResponse<{% if router.response_type %}{{ router.response_type.name }}{% else %}any{% endif %}>> {
        return await this.axios{{ router.router.method.capitalize() }}(`{{ router.ts_path }}`{% if router.request_type %}, data{% endif %}, config);
    }
    {% endfor %}
}
{% endfor %}